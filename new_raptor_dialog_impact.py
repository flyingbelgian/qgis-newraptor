# # -*- coding: utf-8 -*-

# # Form implementation generated from reading ui file 'new_raptor_dialog_impact.ui'
# #
# # Created by: PyQt5 UI code generator 5.15.10
# #
# # WARNING: Any manual changes made to this file will be lost when pyuic5 is
# # run again.  Do not edit this file unless you know what you are doing.


# from PyQt5 import QtCore, QtGui, QtWidgets


# class Ui_dialog_impactTable(object):
#     def setupUi(self, dialog_impactTable):
#         dialog_impactTable.setObjectName("dialog_impactTable")
#         dialog_impactTable.resize(400, 300)
#         self.table_impact = QtWidgets.QTableWidget(dialog_impactTable)
#         self.table_impact.setGeometry(QtCore.QRect(10, 10, 381, 281))
#         self.table_impact.setObjectName("table_impact")
#         self.table_impact.setColumnCount(3)
#         self.table_impact.setRowCount(0)
#         item = QtWidgets.QTableWidgetItem()
#         self.table_impact.setHorizontalHeaderItem(0, item)
#         item = QtWidgets.QTableWidgetItem()
#         self.table_impact.setHorizontalHeaderItem(1, item)
#         item = QtWidgets.QTableWidgetItem()
#         self.table_impact.setHorizontalHeaderItem(2, item)

#         self.retranslateUi(dialog_impactTable)
#         QtCore.QMetaObject.connectSlotsByName(dialog_impactTable)

#     def retranslateUi(self, dialog_impactTable):
#         _translate = QtCore.QCoreApplication.translate
#         dialog_impactTable.setWindowTitle(_translate("dialog_impactTable", "Dialog"))
#         item = self.table_impact.horizontalHeaderItem(0)
#         item.setText(_translate("dialog_impactTable", "Project"))
#         item = self.table_impact.horizontalHeaderItem(1)
#         item.setText(_translate("dialog_impactTable", "Type"))
#         item = self.table_impact.horizontalHeaderItem(2)
#         item.setText(_translate("dialog_impactTable", "Distance"))


##### Everything before this line was generated using pyuic5 #####
##### Everything after this line was cobbled together from what was done with the boilerplate code for new_raptor_dialog_base.ui, which doesn't have to be relcomplied each time we update any of the layout #####

# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NewRaptorDialog
                                 A QGIS plugin
 Add a new raptor nest, create buffer and impact table
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-12-24
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Paul Haubourdin
        email                : paul.haubourdin@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'new_raptor_dialog_impact.ui'))


class NewRaptorImpactDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(NewRaptorImpactDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
