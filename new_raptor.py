# -*- coding: utf-8 -*-
"""
/***************************************************************************
 NewRaptor
                                 A QGIS plugin
 Add a new raptor nest, create buffer and impact table
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-12-24
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Paul Haubourdin
        email                : paul.haubourdin@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QDate
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QTableWidgetItem

from qgis.core import QgsProject, QgsFeature, QgsGeometry, QgsPoint

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .new_raptor_dialog import NewRaptorDialog
from .impact_table import DialogTable
import os.path


class NewRaptor:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'NewRaptor_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Add New Raptor')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('NewRaptor', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/new_raptor/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Add New Raptor Nest'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Add New Raptor'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = NewRaptorDialog()
            # QMessageBox.information(self.dlg, "Message", "Should only run once")

        # QMessageBox.information(self.dlg, "Message", "Should run every time")
        mc = self.iface.mapCanvas()
        self.dlg.spb_lat.setValue(mc.center().y())
        self.dlg.spb_lon.setValue(mc.center().x())
        self.dlg.lastSurveyDateEdit.setDate(QDate.currentDate())

        ### Check if required layers are present in the project
        map_layers = []
        for layer in mc.layers():
            map_layers.append(layer.name())
        missing_layers = []
        if "Raptor Nests" not in map_layers:
            missing_layers.append("Raptor Nests")
        if "Raptor Buffer" not in map_layers:
            missing_layers.append("Raptor Buffer")
        if "Linear Buffer" not in map_layers:
            missing_layers.append("Linear Buffer")
        if missing_layers:
            QMessageBox.information(self.dlg, "Warning", "The following layers are missing: " + ", ".join(missing_layers))
            return

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            layerNests = QgsProject.instance().mapLayersByName("Raptor Nests")[0]
            layerBuffer = QgsProject.instance().mapLayersByName("Raptor Buffer")[0]
            layerLinear = QgsProject.instance().mapLayersByName("Linear Buffer")[0]
            indexNestID = layerNests.fields().indexOf("Nest_ID")
            valueNestID = layerNests.maximumValue(indexNestID) + 1
            valueLat = self.dlg.spb_lat.value()
            valueLon = self.dlg.spb_lon.value()
            valueSpecies = self.dlg.cmb_species.currentText()
            valueBuffer = self.dlg.spb_buffer.value()
            valueStatus = self.dlg.cmb_status.currentText()
            valueSurveyDate = self.dlg.lastSurveyDateEdit.date().toString("yyyy-MM-dd")
            QMessageBox.information(self.dlg, "Message", f"New Nest ID: {valueNestID}\n Latitude: {valueLat}\n Longitude: {valueLon}\n Species: {valueSpecies}\n Buffer: {valueBuffer}\n Status: {valueStatus}\n Survey Date: {valueSurveyDate}")
            featureNest = QgsFeature(layerNests.fields())
            featureNest.setAttribute("lat_y_dd", valueLat)
            featureNest.setAttribute("long_x_dd", valueLon)
            featureNest.setAttribute("recentspec", valueSpecies)
            featureNest.setAttribute("buf_dist", valueBuffer)
            featureNest.setAttribute("recentstat", valueStatus)
            featureNest.setAttribute("lastsurvey", valueSurveyDate)
            featureNest.setAttribute("Nest_ID", valueNestID)
            
            geom = QgsGeometry(QgsPoint(valueLon, valueLat))
            
            featureNest.setGeometry(geom)
            pr = layerNests.dataProvider()
            pr.addFeatures([featureNest])
            layerNests.reload()

            buffer = geom.buffer(valueBuffer, 10)
            featureNest.setGeometry(buffer)
            pr = layerBuffer.dataProvider()
            pr.addFeatures([featureNest])
            layerBuffer.reload()

            dlgTable = DialogTable()
            dlgTable.setWindowTitle(f"Impact table for Nest ID: {valueNestID}")

            bb = buffer.boundingBox()
            linears = layerLinear.getFeatures(bb)
            for linear in linears:
                valID = linear.attribute("Project")
                valType = linear.attribute("Type")
                valDistance = linear.geometry().distance(geom)
                if valDistance < valueBuffer:
                    row = dlgTable.table_impact.rowCount()
                    dlgTable.table_impact.insertRow(row)
                    dlgTable.table_impact.setItem(row, 0, QTableWidgetItem(str(valID)))
                    dlgTable.table_impact.setItem(row, 1, QTableWidgetItem(str(valType)))
                    dlgTable.table_impact.setItem(row, 2, QTableWidgetItem(str("{:4.5f}".format(valDistance))))
            dlgTable.table_impact.sortItems(2)
            dlgTable.show()
            dlgTable.exec_()

            pass
        else:
            # QMessageBox.information(self.dlg, "Message", "Should only run if Cancel is pressed or window is closed")
            pass